{
    "compile_errors": [],
    "decls": {
        "let contract_stream": [{
        	id Int64,
        	customer_id Int64,
        	timestamp Timestamp(
            Microsecond,
            None,
        ),
        	activity Utf8,
        	revenue_impact Float64,
        	plan_type Utf8,
        	activity_occurrence Int64,
        	activity_repeated_at Timestamp(
            Microsecond,
            None,
        ),
        }],
        "let date_slices": [Utf8],
        "let dim_customer": [{
        	id Int64,
        	segment Utf8,
        	channel Utf8,
        	first_contract_signed_date Timestamp(
            Microsecond,
            None,
        ),
        	cohort Utf8,
        }],
        "let e1": [{
        	metric_model Utf8,
        	is_snapshot_reliant_metric Boolean,
        	anchor_date Utf8,
        	date_grain Utf8,
        	metric_date Date32,
        	slice_object Utf8,
        	slice_dimension Utf8,
        	slice_value Utf8,
        	metric_calculation Utf8,
        	metric_value Float64,
        }],
        "let e2": [{
        	metric_model Utf8,
        	is_snapshot_reliant_metric Boolean,
        	anchor_date Utf8,
        	date_grain Utf8,
        	metric_date Date32,
        	slice_object Utf8,
        	slice_dimension Utf8,
        	slice_value Utf8,
        	metric_calculation Utf8,
        	metric_value Float64,
        }],
        "let metric_slices": [Utf8],
        "let metrics_cube": ∀ "__Return", "R", "S" λ {
        	date_slices [Utf8],
        	metric_slices [Utf8],
        	source "R",
        } -> "__Return",
        "let prep": [{
        	customer_id Int64,
        	segment Utf8,
        	channel Utf8,
        	cohort Utf8,
        	timestamp Timestamp(
            Microsecond,
            None,
        ),
        	revenue_impact Float64,
        	activity Utf8,
        	plan_type Utf8,
        }],
    },
    "queries": [
        Ok(
            TypedValue {
                type_: List(
                    Record(
                        [
                            Field {
                                name: "COUNT(*)",
                                type_: Atom(
                                    Int64,
                                ),
                                nullable: true,
                            },
                        ],
                    ),
                ),
                value: "| COUNT(*) |\n|----------|\n| 272      |",
            },
        ),
        Ok(
            TypedValue {
                type_: List(
                    Record(
                        [
                            Field {
                                name: "COUNT(*)",
                                type_: Atom(
                                    Int64,
                                ),
                                nullable: true,
                            },
                        ],
                    ),
                ),
                value: "| COUNT(*) |\n|----------|\n| 264      |",
            },
        ),
    ],
}